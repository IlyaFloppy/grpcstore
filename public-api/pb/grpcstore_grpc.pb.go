// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GRPCStoreServiceClient is the client API for GRPCStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCStoreServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResult, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResult, error)
}

type gRPCStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCStoreServiceClient(cc grpc.ClientConnInterface) GRPCStoreServiceClient {
	return &gRPCStoreServiceClient{cc}
}

func (c *gRPCStoreServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, "/pb.GRPCStoreService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCStoreServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResult, error) {
	out := new(SetResult)
	err := c.cc.Invoke(ctx, "/pb.GRPCStoreService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCStoreServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/pb.GRPCStoreService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCStoreServiceServer is the server API for GRPCStoreService service.
// All implementations must embed UnimplementedGRPCStoreServiceServer
// for forward compatibility
type GRPCStoreServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResult, error)
	Set(context.Context, *SetRequest) (*SetResult, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResult, error)
	mustEmbedUnimplementedGRPCStoreServiceServer()
}

// UnimplementedGRPCStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCStoreServiceServer struct {
}

func (UnimplementedGRPCStoreServiceServer) Get(context.Context, *GetRequest) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGRPCStoreServiceServer) Set(context.Context, *SetRequest) (*SetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedGRPCStoreServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGRPCStoreServiceServer) mustEmbedUnimplementedGRPCStoreServiceServer() {}

// UnsafeGRPCStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCStoreServiceServer will
// result in compilation errors.
type UnsafeGRPCStoreServiceServer interface {
	mustEmbedUnimplementedGRPCStoreServiceServer()
}

func RegisterGRPCStoreServiceServer(s grpc.ServiceRegistrar, srv GRPCStoreServiceServer) {
	s.RegisterService(&_GRPCStoreService_serviceDesc, srv)
}

func _GRPCStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GRPCStoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCStoreServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCStoreService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCStoreServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GRPCStoreService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCStoreServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCStoreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCStoreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GRPCStoreService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCStoreServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GRPCStoreService",
	HandlerType: (*GRPCStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GRPCStoreService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _GRPCStoreService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GRPCStoreService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcstore.proto",
}
